@using ControllableDeviceTypes.ApcAP8959EU3Types
@model IndexModel.OutletTableViewModel


<div class="modal fade" tabindex="-1" role="dialog" id="confirmation-modal">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="modal-title"></h4>
            </div>
            <div class="modal-body">
                <img class="img-responsive" id="modal-image"/>
            </div>
            <div class="modal-footer">
                <center>
                    <button type="button" class="btn btn-success btn-lg" id="modal-btn-yes">Yes</button>
                    <button type="button" class="btn btn-danger btn-lg" id="modal-btn-no">No</button>
                </center>
            </div>
        </div>
    </div>
</div>

<table class="table">
    <thead class="thead-dark">
        <tr>
            <th width="38px"></th>
            <th>Name</th>
            <th width="100px" >Power</th>
            <th>Control</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var outlet in Model.Outlets.OrderBy(o => o.Name).Where(o => !o.Name.Contains("Outlet")))
        {
            string relativeImagePath = string.Format("images/outlets/{0}.png", outlet.Name);
            string absoluteImagePath = System.IO.Path.Combine(Model.WebRootPath, @"images\outlets", outlet.Name + ".png");

            <tr class="@(@outlet.State == Outlet.PowerState.On ? "success" : "")">
                <td style="padding: 4px;">
                    @if (!System.IO.File.Exists(absoluteImagePath))
                    {
                        relativeImagePath = "images/outlets/empty.png";
                    }
                    <img src="@relativeImagePath" class="img-responsive" />
                </td>
                <td>@outlet.Name</td>
                <td>@(outlet.Watts)W (@(outlet.Amps)A)</td>
                <td>
                    @{bool confirmation = Model.OutletConfirmation.Contains(outlet.Name);}
                    @switch (outlet.State)
                    {
                        case Outlet.PowerState.On:
                            var messageOff = string.Format("Turn the {0} off?", outlet.Name);
                            <button data-outlet="@outlet.Id" data-currentpowerstate="@outlet.State" data-confirmation="@confirmation" data-message="@messageOff" data-image="@relativeImagePath" class="btn btn-danger btn-xs btn-click-action btn-block">Turn Off</button>
                            break;
                        case Outlet.PowerState.Off:
                            var messageOn = string.Format("Turn the {0} on?", outlet.Name);
                            <button data-outlet="@outlet.Id" data-currentpowerstate="@outlet.State" data-confirmation="@false" data-message="@messageOn" data-image="@relativeImagePath" class="btn btn-success btn-xs btn-click-action btn-block">Turn On</button>
                            break;
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

